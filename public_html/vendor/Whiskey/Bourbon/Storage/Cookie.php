<?php


namespace Whiskey\Bourbon\Storage;


use stdClass;
use Exception;
use InvalidArgumentException;
use Whiskey\Bourbon\Security\Crypt;


/**
 * Cookie class
 * @package Whiskey\Bourbon\Storage
 */
class Cookie implements DataStorageInterface
{


   protected $_dependencies;


    /**
     * Instantiate a Cookie object
     * @param Crypt $crypt Crypt object
     * @throws InvalidArgumentException if dependencies are not provided
     */
    public function __construct(Crypt $crypt)
    {

        if (!isset($crypt))
        {
            throw new InvalidArgumentException('Dependencies not provided');
        }

        $this->_dependencies        = new stdClass();
        $this->_dependencies->crypt = $crypt;

    }


    /**
     * Check whether a cookie has been generated by this class
     * @param  string $key Name of cookie variable
     * @return bool        Whether the cookie was generated by this variable
     */
    public function isValid($key = null)
    {

        $key    = (string)$key;
        $result = isset($_COOKIE[$key]) ? $_COOKIE[$key] : null;

        if ($result !== null)
        {

            /*
             * Break open the cookie
             */
            $cookie_parts = base64_decode($result);

            /*
             * Check that the data is valid
             */
            if ($cookie_parts = json_decode($cookie_parts) AND $cookie_parts->_bourbon_cookie_)
            {
                return true;
            }

        }

        return false;

    }


    /**
     * Retrieve a stored cookie variable
     * @param  string $key Name of cookie variable
     * @return mixed       Cookie variable value
     */
    public function read($key = null)
    {

        $key    = (string)$key;
        $result = isset($_COOKIE[$key]) ? $_COOKIE[$key] : null;

        if ($result !== null)
        {

            /*
             * Break open the cookie
             */
            $cookie_parts = base64_decode($result);

            /*
             * Check that the data is valid, hasn't expired and hasn't been
             * tampered with
             */
            if ($cookie_parts = json_decode($cookie_parts) AND
                $cookie_parts->_bourbon_cookie_ AND
                $cookie_parts->hash === $this->_dependencies->crypt->hashHmac($cookie_parts->data) AND
                (!$cookie_parts->ttl OR $cookie_parts->ttl >= time()))
            {

                /*
                 * Attempt to decrypt the value
                 */
                try
                {

                    $result = $this->_dependencies->crypt->decrypt($cookie_parts->data);

                    if (($result = unserialize(base64_decode($result))) !== false)
                    {
                        return $result;
                    }

                }

                /*
                 * If not, assume that encryption was not used
                 */
                catch (Exception $exception)
                {

                    if (($result = unserialize(base64_decode($cookie_parts->data))) !== false)
                    {
                        return $result;
                    }

                }

            }

        }

        return null;

    }


    /**
     * Store a cookie variable
     * @param  string $key   Name of cookie variable
     * @param  mixed  $value Cookie variable value
     * @param  int    $ttl   Optional TTL
     * @return bool          Whether the cookie was successfully written
     */
    public function write($key = null, $value = '', $ttl = 0)
    {

        if ((string)$key != '')
        {

            $ttl = $ttl ? (time() + (int)$ttl) : 0;
            $key = (string)$key;
            
            /*
             * Encrypt the value
             */
            try
            {
                $cookie_value = $this->_dependencies->crypt->encrypt(base64_encode(serialize($value)));
            }

            /*
             * If encryption failed, use the raw value
             */
            catch (Exception $exception)
            {
                $cookie_value = base64_encode(serialize($value));
            }

            /*
             * Hash the data to safeguard against tampering
             */
            $cookie_hash = $this->_dependencies->crypt->hashHmac($cookie_value);

            $value = base64_encode(json_encode(['data'             => $cookie_value,
                                                'hash'             => $cookie_hash,
                                                'ttl'              => $ttl,
                                                '_bourbon_cookie_' => true]));
            
            if (setcookie($key, $value, $ttl))
            {

                $_COOKIE[$key] = $value;

                return true;

            }

        }

        return false;

    }


    /**
     * Unset a cookie variable
     * @param  string $key Name of cookie variable
     * @return bool        Whether the cookie was successfully cleared
     */
    public function clear($key = null)
    {

        if ((string)$key != '')
        {

            $key = (string)$key;

            if (isset($_COOKIE[$key]))
            {

                unset($_COOKIE[$key]);

                $this->write($key, '', -3600);

            }

            return true;
        }

        return false;

    }


    /**
     * Unset cookie variables that begin with a certain string
     * @param  string $key_fragment Initial fragment of cookie key name
     * @return bool                 Whether the cookies were successfully cleared
     */
    public function prefixClear($key_fragment = null)
    {

        $key_fragment = (string)$key_fragment;

        foreach ($_COOKIE as $var => $value)
        {
            if (mb_substr($var, 0, mb_strlen($key_fragment)) == $key_fragment)
            {
                $this->clear($var);
            }
        }
        
        return true;

    }


}