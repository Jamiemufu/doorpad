<?php


namespace Whiskey\Bourbon\Security;


use stdClass;
use InvalidArgumentException;
use Whiskey\Bourbon\Storage\Session;


/**
 * Csrf class
 * @package Whiskey\Bourbon\Security
 */
class Csrf
{


    protected $_dependencies = null;


    /**
     * Instantiate the Instance object
     * @param Session $session Session object
     * @throws InvalidArgumentException if dependencies are not provided
     */
    public function __construct(Session $session)
    {

        if (!isset($session))
        {
            throw new InvalidArgumentException('Dependencies not provided');
        }

        $this->_dependencies          = new stdClass();
        $this->_dependencies->session = $session;

    }


    /**
     * Generate a token to use as protection against CSRF and stores it in
     * the active session
     * @return string 64-character long alphanumeric string
     */
    public function generateToken()
    {

        $tokens = $this->_dependencies->session->read('_bourbon_csrf_tokens');

        if (!$tokens)
        {
            $tokens = [];
        }
        
        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';        
        $new_token  = '';

        for ($i = 0; $i < 64; $i++)
        {
            $new_token .= mb_substr($characters, mt_rand(0, mb_strlen($characters) - 1), 1);
        }
        
        $tokens[] = $new_token;
        
        $this->_dependencies->session->write('_bourbon_csrf_tokens', $tokens);
        
        return $new_token;

    }

  
    /**
     * Check to see if a token has been generated during the current session
     * @param  string $token Token generated by generateCsrfToken()
     * @return bool          Boolean value for valid token
     */
    public function checkToken($token = '')
    {

        /*
         * If no token was provided, see if one exists in a superglobal
         */
        if ($token == '')
        {

            /*
             * Header
             */
            if (isset($_SERVER['HTTP_X_CSRF_TOKEN']) AND
                $_SERVER['HTTP_X_CSRF_TOKEN'] != '')
            {
                $token = $_SERVER['HTTP_X_CSRF_TOKEN'];
            }

            /*
             * POST
             */
            else if (isset($_POST['csrf_token']) AND
                     $_POST['csrf_token'] != '')
            {
                $token = $_POST['csrf_token'];
            }

            /*
             * GET
             */
            else if (isset($_GET['csrf_token']) AND
                     $_GET['csrf_token'] != '')
            {
                $token = $_GET['csrf_token'];
            }

        }

        /*
         * See if the token exists
         */
        if ($token != '' AND
            mb_strlen($token) == 64 AND
            $tokens = $this->_dependencies->session->read('_bourbon_csrf_tokens') AND
            in_array($token, $tokens))
        {

            /*
             * Remove the token so that it cannot be reused
             */
            $tokens = array_diff($tokens, [$token]);
            $this->_dependencies->session->write('_bourbon_csrf_tokens', $tokens);
            
            return true;

        }
        
        return false;

    }


}